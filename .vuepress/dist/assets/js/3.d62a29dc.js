(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{56:function(t,a,e){"use strict";e.r(a);var r=e(0),s=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"git-版本管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-版本管理","aria-hidden":"true"}},[t._v("#")]),t._v(" git 版本管理")]),e("p",[e("a",{attrs:{href:"http://git-scm.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("下载地址")])]),e("h2",{attrs:{id:"配置-git-用户和邮箱"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置-git-用户和邮箱","aria-hidden":"true"}},[t._v("#")]),t._v(" 配置 git 用户和邮箱")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('$ git config --global user.name "你的github用户名"\n$ git config --global user.email "你的github邮箱"\n# 不配置用户名和邮箱的话无法提交,因为git不知道你是谁\n')])]),e("h2",{attrs:{id:"查看配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看配置","aria-hidden":"true"}},[t._v("#")]),t._v(" 查看配置")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git config --global user.name\n$ git config --global user.email\n")])]),e("h2",{attrs:{id:"查看所有配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看所有配置","aria-hidden":"true"}},[t._v("#")]),t._v(" 查看所有配置")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git config --list\n")])]),e("h1",{attrs:{id:"工作流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工作流","aria-hidden":"true"}},[t._v("#")]),t._v(" 工作流")]),e("p",[e("a",{attrs:{href:"http://card.mugeda.com/campaigns/56d2c4a0a3664e3308000407/20160304090522/56d97729a3664e9c65000047/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考")])]),e("h2",{attrs:{id:"工作区"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工作区","aria-hidden":"true"}},[t._v("#")]),t._v(" 工作区")]),e("p",[t._v("通过 git add 添加到暂存区")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("  $ git add '文件名'\n")])]),e("h2",{attrs:{id:"暂存区"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#暂存区","aria-hidden":"true"}},[t._v("#")]),t._v(" 暂存区")]),e("p",[t._v("特点:过渡的作用，避免误操作，保护工作区和历史区，分支处理;")]),e("p",[t._v("通过 git commit 添加到历史区")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('  $ git commit -m"注释内容"\n')])]),e("h2",{attrs:{id:"历史区"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#历史区","aria-hidden":"true"}},[t._v("#")]),t._v(" 历史区")]),e("p",[t._v("查看历史状态")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("  $ git log\n")])]),e("p",[t._v("修改时通过 git status 查看当前状态")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("7.git diff\n")])]),e("p",[t._v("不同区的代码比较")]),e("h2",{attrs:{id:"工作区和暂存区"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工作区和暂存区","aria-hidden":"true"}},[t._v("#")]),t._v(" 工作区和暂存区")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git diff\n")])]),e("h2",{attrs:{id:"暂存区和历史区"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#暂存区和历史区","aria-hidden":"true"}},[t._v("#")]),t._v(" 暂存区和历史区")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git diff --cached（--staged）\n")])]),e("h2",{attrs:{id:"工作区和版本库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工作区和版本库","aria-hidden":"true"}},[t._v("#")]),t._v(" 工作区和版本库")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git diff master\n")])]),e("h2",{attrs:{id:"撤销"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#撤销","aria-hidden":"true"}},[t._v("#")]),t._v(" 撤销")]),e("p",[t._v("撤销回 git add 的内容")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('git reset Head "文件名"\n')])]),e("h2",{attrs:{id:"撤回文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#撤回文件","aria-hidden":"true"}},[t._v("#")]),t._v(" 撤回文件")]),e("p",[t._v("先从缓存区撤销,缓存区无内容，从历史区域撤销")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('$ git checkout "文件名"\n#有的时候我们希望提交时合并到上一次的提交 git commit --amend\n')])]),e("h2",{attrs:{id:"删除"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除","aria-hidden":"true"}},[t._v("#")]),t._v(" 删除")]),e("p",[t._v("删除暂存区和工作区\n删除暂存区中的内容,并且保证工作区中的内容已经不存在")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('$ git rm "文件名"\n')])]),e("p",[t._v("若本地文件存在则不能删除，需要通过-f 参数删除")]),e("h2",{attrs:{id:"仅删除缓存区"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#仅删除缓存区","aria-hidden":"true"}},[t._v("#")]),t._v(" 仅删除缓存区")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('$ git rm --cached "文件名"\n')])]),e("h2",{attrs:{id:"恢复"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#恢复","aria-hidden":"true"}},[t._v("#")]),t._v(" 恢复")]),e("p",[t._v("恢复某个版本文件")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git checkout commit_id filename 某个文件\n")])]),e("p",[t._v("通过版本 id 恢复")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git reset --hard commit_id\n")])]),e("p",[t._v("恢复未来\n查看当时回滚时的版本")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git reflog\n")])]),e("p",[t._v("快速版本回退")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git reset --hard HEAD^\n$ git reset --hard HEAD~3\n")])]),e("h2",{attrs:{id:"同步远程仓库-github"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#同步远程仓库-github","aria-hidden":"true"}},[t._v("#")]),t._v(" 同步远程仓库 gitHub")]),e("p",[t._v("注册账号\n新建项目")]),e("p",[t._v("添加远程仓库")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('$ git remote add origin "地址"\n')])]),e("p",[t._v("添加忽略文件")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ touch .gitignore\n$ echo .DS_Store\n$ echo node_modules\n$ echo .idea\n")])]),e("p",[t._v("推送代码")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git push origin master\n")])]),e("p",[t._v("查看")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git remote 查看名字\n$ git remote -v 查看地址\n")])]),e("h1",{attrs:{id:"代码的合并"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码的合并","aria-hidden":"true"}},[t._v("#")]),t._v(" 代码的合并")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git fetch\n")])]),e("p",[t._v("拉取过来手动合并")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git diff master origin/master\n$ git merge origin/master\n")])]),e("p",[t._v("拉取并合并")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git pull\n")])]),e("h1",{attrs:{id:"分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支","aria-hidden":"true"}},[t._v("#")]),t._v(" 分支")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git branch\ngit branch 创建分支\ngit checkout a\ngit checkout -b c切换分支\n#在master  git merge\ngit checkout b\ngit branch --merged 合并了哪些分支\ngit branch --no-merged 合并了哪些分支\ngit branch -d a 删除分支\ngit branch -D a 删除分支\n")])]),e("ol",{attrs:{start:"14"}},[e("li",[t._v("tag 版本")])]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git tag v1.0\n")])]),e("h1",{attrs:{id:"git-无法检测到文件名大小写的更改"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-无法检测到文件名大小写的更改","aria-hidden":"true"}},[t._v("#")]),t._v(" Git 无法检测到文件名大小写的更改")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git config core.ignorecase false\n# 关闭git忽略大小写配置，即可检测到大小写名称更改。\n")])]),e("h1",{attrs:{id:"sourcetreeapp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sourcetreeapp","aria-hidden":"true"}},[t._v("#")]),t._v(" sourcetreeapp")]),e("p",[e("a",{attrs:{href:"https://www.sourcetreeapp.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("下载")])])])}],!1,null,null,null);a.default=s.exports}}]);